{"version":3,"file":"static/js/911.c7e90828.chunk.js","mappings":"+GAEMA,EAAe,CACnBC,aAAc,OACdC,mBAAoB,SAACC,GAAiC,GAGlDC,GAAeC,E,QAAAA,eAAcL,GAEnC,K,wECaA,UAjBuC,SAAC,GAAkB,IAAhBM,EAAe,EAAfA,SAClCC,EAAgCC,aAAaC,QAAQ,SAC3D,GAA0BC,EAAAA,EAAAA,UAASH,GAAkB,SAArD,eAAOI,EAAP,KAAcC,EAAd,KAYA,OALAC,EAAAA,EAAAA,YAAU,WACM,UAAVF,EAAmBG,SAASC,KAAKC,UAAUC,OAAO,QACjDH,SAASC,KAAKC,UAAUE,IAAI,OAClC,GAAE,CAACP,KAEG,SAAC,aAAD,CAAuBQ,MAAO,CAAElB,aAAcU,EAAOT,mBAVjC,SAACC,GAC1BS,EAAST,GACTK,aAAaY,QAAQ,QAASjB,EAC/B,GAOM,SAA4EG,GACpF,C","sources":["context/ThemeContext.ts","context/ThemeContextWrapper.tsx"],"sourcesContent":["import { createContext } from \"react\";\n\nconst defaultValue = {\n  currentTheme: \"dark\",\n  changeCurrentTheme: (newTheme: \"light\" | \"dark\") => {},\n};\n\nconst ThemeContext = createContext(defaultValue);\n\nexport default ThemeContext;\n","import { FC, useState, useEffect } from \"react\";\nimport ThemeContext from \"./ThemeContext\";\n\nimport { Props } from \"./types\";\n\nconst ThemeContextWrapper: FC<Props> = ({ children }) => {\n  const persistedTheme: string | null = localStorage.getItem(\"theme\")\n  const [theme, setTheme] = useState(persistedTheme || \"light\")\n\n  const changeCurrentTheme = (newTheme: \"light\" | \"dark\") => {\n    setTheme(newTheme)\n    localStorage.setItem(\"theme\", newTheme)\n  }\n\n  useEffect(() => {\n    if (theme === \"light\") document.body.classList.remove(\"dark\")\n    else document.body.classList.add(\"dark\")\n  }, [theme])\n\n  return <ThemeContext.Provider value={{ currentTheme: theme, changeCurrentTheme }}>{children}</ThemeContext.Provider>\n}\n\nexport default ThemeContextWrapper;"],"names":["defaultValue","currentTheme","changeCurrentTheme","newTheme","ThemeContext","createContext","children","persistedTheme","localStorage","getItem","useState","theme","setTheme","useEffect","document","body","classList","remove","add","value","setItem"],"sourceRoot":""}